using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using System.Drawing.Imaging;
using Qview.Naoya.Imaging;

namespace Qview
{
    public static class BmpConverter
    {
        public static Bitmap Convert(Bitmap bmp, float[][] colorMatrix)
        {
            Bitmap newBmp = new Bitmap(bmp.Width, bmp.Height);

            using (Graphics g = Graphics.FromImage(newBmp))
            using(ImageAttributes ia = new ImageAttributes())
            {
                ia.SetColorMatrix(new ColorMatrix(colorMatrix));
                g.DrawImage(bmp, new Rectangle(0, 0, newBmp.Width, newBmp.Height)
                    , 0f, 0f, newBmp.Width, newBmp.Height, GraphicsUnit.Pixel, ia);
            }
            return newBmp;
        }

        public static Bitmap Convert(Bitmap bmp, ImageAttributes ia)
        {
            Bitmap newBmp = new Bitmap(bmp.Width, bmp.Height);

            using (Graphics g = Graphics.FromImage(newBmp))
            {
                g.DrawImage(bmp, new Rectangle(0, 0, newBmp.Width, newBmp.Height)
                    , 0f, 0f, newBmp.Width, newBmp.Height, GraphicsUnit.Pixel, ia);
            }
            return newBmp;
        }

        //自前でやったが非常に遅い。
        public static Bitmap Convert(Bitmap bmp, Func<Color, Color> conv_func)
        {
            Bitmap newBmp = new Bitmap(bmp.Width, bmp.Height);

            for (int y = 0; y < bmp.Height; y++)
                for (int x = 0; x < bmp.Width; x++)
                    newBmp.SetPixel(x, y, conv_func(bmp.GetPixel(x, y)));

            return newBmp;
        }

        private static int range(int n,int min,int max){
            return Math.Min(Math.Max(n,0),255);
        }

        public static Bitmap Filter3x3(Bitmap bmp, int[,] mtx)
        {
            Bitmap newBmp = new Bitmap(bmp.Width - 2, bmp.Height - 2);
            Color[,] colMtx = new Color[3, 3];
            int red, green, blue;
            int x, y, orgX, orgY;

            for (y = 0; y < newBmp.Height; y++) {
                for (x = 0; x < newBmp.Width; x++) {
                    for (orgY = 0; orgY < 3; orgY++) {
                        for (orgX = 0; orgX < 3; orgX++) {
                            colMtx[orgX, orgY] = bmp.GetPixel(x + orgX, y + orgY);
                        }
                    }

                    red = mtx[0, 0] * colMtx[0, 0].R + mtx[1, 0] * colMtx[1, 0].R + mtx[2, 0] * colMtx[2, 0].R
                        + mtx[0, 1] * colMtx[0, 1].R + mtx[1, 1] * colMtx[1, 1].R + mtx[2, 0] * colMtx[2, 1].R
                        + mtx[0, 2] * colMtx[0, 2].R + mtx[1, 2] * colMtx[1, 2].R + mtx[2, 0] * colMtx[2, 2].R;

                    green = mtx[0, 0] * colMtx[0, 0].G + mtx[1, 0] * colMtx[1, 0].G + mtx[2, 0] * colMtx[2, 0].G
                        + mtx[0, 1] * colMtx[0, 1].G + mtx[1, 1] * colMtx[1, 1].G + mtx[2, 0] * colMtx[2, 1].G
                        + mtx[0, 2] * colMtx[0, 2].G + mtx[1, 2] * colMtx[1, 2].G + mtx[2, 0] * colMtx[2, 2].G;

                    blue = mtx[0, 0] * colMtx[0, 0].B + mtx[1, 0] * colMtx[1, 0].B + mtx[2, 0] * colMtx[2, 0].B
                        + mtx[0, 1] * colMtx[0, 1].B + mtx[1, 1] * colMtx[1, 1].B + mtx[2, 0] * colMtx[2, 1].B
                        + mtx[0, 2] * colMtx[0, 2].B + mtx[1, 2] * colMtx[1, 2].B + mtx[2, 0] * colMtx[2, 2].B;


                    newBmp.SetPixel(x, y,
                        Color.FromArgb(range(red, 0, 255), range(green, 0, 255), range(blue, 0, 255)));
                }
            }
            return newBmp;
        }


        public static Bitmap Filter3x3(Bitmap bmp, int[,] mtx, Func<int,int> preAssign)
        {
            Bitmap newBmp = new Bitmap(bmp.Width - 2, bmp.Height - 2);
            Color[,] colMtx = new Color[3, 3];
            int red, green, blue;
            int x, y, orgX, orgY;

            for (y = 0; y < newBmp.Height; y++) {
                for (x = 0; x < newBmp.Width; x++) {
                    for (orgY = 0; orgY < 3; orgY++) {
                        for (orgX = 0; orgX < 3; orgX++) {
                            colMtx[orgX, orgY] = bmp.GetPixel(x + orgX, y + orgY);
                        }
                    }

                    red = preAssign(
                        mtx[0, 0] * colMtx[0, 0].R + mtx[1, 0] * colMtx[1, 0].R + mtx[2, 0] * colMtx[2, 0].R
                        + mtx[0, 1] * colMtx[0, 1].R + mtx[1, 1] * colMtx[1, 1].R + mtx[2, 0] * colMtx[2, 1].R
                        + mtx[0, 2] * colMtx[0, 2].R + mtx[1, 2] * colMtx[1, 2].R + mtx[2, 0] * colMtx[2, 2].R);

                    green = preAssign(
                        mtx[0, 0] * colMtx[0, 0].G + mtx[1, 0] * colMtx[1, 0].G + mtx[2, 0] * colMtx[2, 0].G
                        + mtx[0, 1] * colMtx[0, 1].G + mtx[1, 1] * colMtx[1, 1].G + mtx[2, 0] * colMtx[2, 1].G
                        + mtx[0, 2] * colMtx[0, 2].G + mtx[1, 2] * colMtx[1, 2].G + mtx[2, 0] * colMtx[2, 2].G);

                    blue = preAssign(
                        mtx[0, 0] * colMtx[0, 0].B + mtx[1, 0] * colMtx[1, 0].B + mtx[2, 0] * colMtx[2, 0].B
                        + mtx[0, 1] * colMtx[0, 1].B + mtx[1, 1] * colMtx[1, 1].B + mtx[2, 0] * colMtx[2, 1].B
                        + mtx[0, 2] * colMtx[0, 2].B + mtx[1, 2] * colMtx[1, 2].B + mtx[2, 0] * colMtx[2, 2].B);


                    newBmp.SetPixel(x, y,
                        Color.FromArgb(range(red, 0, 255), range(green, 0, 255), range(blue, 0, 255)));
                }
            }
            return newBmp;
        }

        public static Bitmap Filter3x3mono (Bitmap bmp, int[,] mtx)
        {
            Bitmap newBmp = new Bitmap(bmp.Width - 2, bmp.Height - 2);
            Color[,] colMtx = new Color[3, 3];
            int col;
            int x, y, orgX, orgY;

            for ( y = 0; y < newBmp.Height; y++ ) {
                for ( x = 0; x < newBmp.Width; x++ ) {
                    for ( orgY = 0; orgY < 3; orgY++ ) {
                        for ( orgX = 0; orgX < 3; orgX++ ) {
                            colMtx[orgX, orgY] = bmp.GetPixel(x + orgX, y + orgY);
                        }
                    }

                    col = mtx[0, 0] * colMtx[0, 0].ToArgb() + mtx[1, 0] * colMtx[1, 0].ToArgb() + mtx[2, 0] * colMtx[2, 0].ToArgb()
                        + mtx[0, 1] * colMtx[0, 1].ToArgb() + mtx[1, 1] * colMtx[1, 1].ToArgb() + mtx[2, 0] * colMtx[2, 1].ToArgb()
                        + mtx[0, 2] * colMtx[0, 2].ToArgb() + mtx[1, 2] * colMtx[1, 2].ToArgb() + mtx[2, 0] * colMtx[2, 2].ToArgb();


                    newBmp.SetPixel(x, y,
                        Color.FromArgb(col));
                }
            }
            return newBmp;
        }

        public static int removeAlpha (Color col)
        {
            return ( col.B << 16 ) + ( col.G << 8 ) + col.R;
        }

        public static Bitmap Filter3x3mono (Bitmap bmp, int[,] mtx, Func<int, int> preAssign)
        {
            Bitmap newBmp = new Bitmap(bmp.Width - 2, bmp.Height - 2);
            Color[,] colMtx = new Color[3, 3];
            int col;
            int x, y, orgX, orgY;

            for ( y = 0; y < newBmp.Height; y++ ) {
                for ( x = 0; x < newBmp.Width; x++ ) {
                    for ( orgY = 0; orgY < 3; orgY++ ) {
                        for ( orgX = 0; orgX < 3; orgX++ ) {
                            colMtx[orgX, orgY] = bmp.GetPixel(x + orgX, y + orgY);
                        }
                    }

                    col = preAssign(
                        mtx[0, 0] * removeAlpha(colMtx[0, 0]) + mtx[1, 0] * removeAlpha(colMtx[1, 0]) + mtx[2, 0] * removeAlpha( colMtx[2, 0])
                        + mtx[0, 1] * removeAlpha(colMtx[0, 1]) + mtx[1, 1] * removeAlpha( colMtx[1, 1]) + mtx[2, 0] * removeAlpha(colMtx[2, 1])
                        + mtx[0, 2] * removeAlpha(colMtx[0, 2]) + mtx[1, 2] * removeAlpha(colMtx[1, 2]) + mtx[2, 0] * removeAlpha(colMtx[2, 2]));


                    newBmp.SetPixel(x, y,Color.FromArgb(col));
                }
            }
            return newBmp;
        }


        public static Bitmap toNega(Bitmap bmp)
        {
            return Convert(
                bmp,
                new float[][] {
                    new float[] {-1,0,0,0,0},
                    new float[] {0,-1,0,0,0},
                    new float[] {0,0,-1,0,0},
                    new float[] {0,0,0,1,0},
                    new float[] {1,1,1,1,1}
                });
        }

        public static Bitmap toGreenOnly(Bitmap bmp)
        {
            return Convert(
                bmp,
                new float[][] {
                    new float[] {0,0,0,0,0},
                    new float[] {0,1,0,0,0},
                    new float[] {0,0,0,0,0},
                    new float[] {0,0,0,1,0},
                    new float[] {0,0,0,0,1}
                });
        }

        public static Bitmap toRedOnly(Bitmap bmp)
        {
            return Convert(
                bmp,
                new float[][] {
                    new float[] {1,0,0,0,0},
                    new float[] {0,0,0,0,0},
                    new float[] {0,0,0,0,0},
                    new float[] {0,0,0,1,0},
                    new float[] {0,0,0,0,1}
                });
        }

        public static Bitmap toBlueOnly(Bitmap bmp)
        {
            return Convert(
                bmp,
                new float[][] {
                    new float[] {0,0,0,0,0},
                    new float[] {0,0,0,0,0},
                    new float[] {0,0,1,0,0},
                    new float[] {0,0,0,1,0},
                    new float[] {0,0,0,0,1}
                });
        }

        public static Bitmap toMonochrome(Bitmap bmp)
        {
            return Convert(
                bmp,
                new float[][] {
                    new float[] {.298912f,.298912f,.298912f,0,0},
                    new float[] {.586611f,.586611f,.586611f,0,0},
                    new float[] {.114478f,.114478f,.114478f,0,0},
                    new float[] {0,0,0,1,0},
                    new float[] {0,0,0,0,1}
                });
        }

        public static Bitmap toBinaryImage(Bitmap bmp)
        {
            Bitmap newBmp;

            using (ImageAttributes ia = new ImageAttributes())
            {
                ia.SetColorMatrix(new ColorMatrix(
                    new float[][] {
                        new float[] {.298912f,.298912f,.298912f,0,0},
                        new float[] {.586611f,.586611f,.586611f,0,0},
                        new float[] {.114478f,.114478f,.114478f,0,0},
                        new float[] {0,0,0,1,0},
                        new float[] {0,0,0,0,1}
                }));
                ia.SetThreshold(0.5f);
                newBmp = Convert(bmp, ia);
            }
            return newBmp;
        }

        public static Bitmap toSepia(Bitmap bmp)
        {
            return Convert(
                bmp,
                new float[][] {
                    new float[] {0.393F, 0.349F, 0.272F, 0, 0},
                    new float[] {0.769F, 0.686F, 0.534F, 0, 0},
                    new float[] {0.189F, 0.168F, 0.131F, 0, 0},
                    new float[] {0,0,0,1,0},
                    new float[] {0,0,0,0,1}
                });
        }

        public static Bitmap filterLaplacian8(Bitmap bmp)
        {
            return Filter3x3(bmp,
                new int[,]{
                    {-1,-1,-1},
                    {-1,8,-1},
                    {-1,-1,-1}
                });
        }

        public static Bitmap filterLaplacian4(Bitmap bmp)
        {
            return Filter3x3(bmp,
                  new int[,]{
                    {0,-1,0},
                    {-1,4,-1},
                    {0,-1,0},
                });
        }

        public static Bitmap sobelVertical (Bitmap bmp)
        {
            return Filter3x3(bmp,
                new int[,]{
                    {1,2,1},
                    {0,0,0},
                    {-1,-2,-1},
                });
        }

        public static Bitmap sobelHorizontal (Bitmap bmp)
        {
            return Filter3x3(bmp,
                new int[,] {
                    {1,0,-1},
                    {2,0,-2},
                    {1,0,-1},
                });
        }

        public static int square (int x)
        {
            return x * x;
        }

        }

        public static Bitmap filterSmooth(Bitmap bmp,int weight = 1)
        {
            return Filter3x3(bmp,
                new int[,]{
                    {1,1,1},
                    {1,weight,1},
                    {1,1,1}},
                    (int x) => { return x / (weight + 8); });
        }

        public static int getPostalStep (int level)
        {
            return 255 / ( level - 1 );
        }

        public static Bitmap posterize (Bitmap bmp, int level)
        {
            int step = 255 / ( level - 1 );
            int[] values = new int[level];
            var result = new Bitmap(bmp);

            for ( int i = 0; i < values.Length; i++ ) {
                values[i] = i * step;
            }

            for ( int x = 0; x < result.Width; x++ ) {
                for ( int y = 0; y < result.Height; y++ ) {
                    var c = bmp.GetPixel(x, y);
                    var r = values[(int)Math.Floor(c.R / ( 256.0d / level ))];
                    var g = values[(int)Math.Floor(c.G / ( 256.0d / level ))];
                    var b = values[(int)Math.Floor(c.B / ( 256.0d / level ))];

                    result.SetPixel(x, y, Color.FromArgb(r, g, b));
                }
            }
            return result;
        }

        public static Bitmap posterizeMid (Bitmap bmp, int level)
        {
            var colors = getMaxMin(bmp);
            var cMin = colors.Item1;
            var cMax = colors.Item2;

            var rRange = cMax.R - cMin.R + 1;
            var gRange = cMax.G - cMin.G + 1;
            var bRange = cMax.B - cMin.B + 1;

            var rStep = ( rRange - 1 ) / ( level - 1 );
            var gStep = ( gRange - 1 ) / ( level - 1 );
            var bStep = ( bRange - 1 ) / ( level - 1 );

            var rValues = new int[level];
            var gValues = new int[level];
            var bValues = new int[level];

            for ( int i = 0; i < level; i++ ) {
                rValues[i] = i * rStep;
                gValues[i] = i * gStep;
                bValues[i] = i * bStep;
            }

            var canvas = new Bitmap(bmp.Width, bmp.Height);

            for ( int x = 0; x < canvas.Width; x++ ) {
                for ( int y = 0; y < canvas.Height; y++ ) {
                    var c = bmp.GetPixel(x, y);
                    var r = rValues[(int)Math.Floor(c.R / ( (double)rRange / level ))];
                    var g = gValues[(int)Math.Floor(c.G / ( (double)gRange / level ))];
                    var b = bValues[(int)Math.Floor(c.B / ( (double)bRange / level ))];
                    canvas.SetPixel(x, y, Color.FromArgb(r, g, b));
                }
            }

            return canvas;
        }

    }
}
